<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Chat</title>
  <link rel="stylesheet" type="text/css" href="/overall.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.6/dist/css/bootstrap.min.css" />
  <style>
    .chat-container {
      max-width: 900px;
      margin: 40px auto;
      background: white;
      padding: 30px;
      border-radius: 15px;
      box-shadow: 0 5px 25px rgba(0,0,0,0.1);
    }

    .chat-header {
      font-size: 1.5rem;
      font-weight: bold;
      margin-bottom: 20px;
    }

    #chatBox {
      height: 300px;
      overflow-y: auto;
      border: 1px solid #ddd;
      border-radius: 10px;
      padding: 15px;
      background-color: #f9f9f9;
      margin-bottom: 15px;
      font-size: 0.95rem;
    }

    #chatBox div {
      margin-bottom: 10px;
    }

    .chat-form {
      display: flex;
      gap: 10px;
    }

    .chat-form input {
      flex: 1;
    }

    #receiverSelect {
      margin-bottom: 20px;
    }

    .sender {
      font-weight: bold;
      color: #4a4a4a;
    }

    .message {
      margin-left: 10px;
    }

    .unread-badge {
        color: white;
        background: red;
        border-radius: 50%;
        padding: 2px 6px;
        font-size: 0.75rem;
        margin-left: 6px;
        vertical-align: middle;
    }
    .red-dot {
      position: absolute;
      top: 0;
      right: 0;
      width: 12px;
      height: 12px;
      background-color: red;
      border-radius: 50%;
      border: 2px solid white;
    }

    .main-wrapper {
      max-width: 1200px;
      margin: 0 auto;
      padding: 30px 20px;
    }
  </style>
</head>
<body>
  <%- include('../partials/navbar.ejs') %>

  <div class="main-wrapper">
    <div class="chat-container">

            <div class="chat-header">ðŸ’¬ CASUGOL Chat</div>

            <div class="d-flex flex-wrap gap-3 mb-4" id="userCards">
              <% staffList.forEach(user => { %>
                <div class="card user-card p-2 text-center" data-userid="<%= user.staffID %>" style="width: 100px; cursor: pointer;">
                  <div class="position-relative d-inline-block">
                    <img src="/images/<%= user.profile_image || 'default.png' %>" 
                        onerror="this.src='/images/default.png'"
                        alt="Profile"
                        class="rounded-circle mb-2" 
                        style="width: 60px; height: 60px; object-fit: cover;">
                    <span class="red-dot d-none"></span>
                  </div>
                  <div style="font-size: 0.85rem;"><%= user.name %></div>
                </div>
              <% }) %>
            </div>

            <div id="chatSection" style="display: none;">
              <div id="chatBox"></div>

              <form id="sendForm" class="chat-form mt-3">
                <input type="text" id="messageInput" class="form-control" placeholder="Type your message..." required />
                <button type="submit" class="btn btn-success">Send</button>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    let selectedUserId = null;
    const chatBox = document.getElementById('chatBox');
    const messageInput = document.getElementById('messageInput');

    // Load messages from server
    function loadMessages() {
      if (!selectedUserId) return;
      fetch(`/chat/${selectedUserId}`)
        .then(res => res.json())
        .then(messages => {
          chatBox.innerHTML = messages.map(m =>
            `<div><span class="sender">${m.senderID}</span>: <span class="message">${m.content}</span></div>`
          ).join('');
          chatBox.scrollTop = chatBox.scrollHeight;
        });
    }

    // Update unread message badges
    function updateUnreadCounts() {
      fetch('/chat/unread-counts')
        .then(res => res.json())
        .then(counts => {
          document.querySelectorAll('.user-card').forEach(card => {
            const userId = card.dataset.userid;
            const count = counts[userId] || 0;

            const badge = card.querySelector('.unread-badge');
            const dot = card.querySelector('.red-dot');

            if (badge) badge.remove();
            if (dot) dot.classList.add('d-none');

            if (count > 0) {
              // Badge (optional number)
              const newBadge = document.createElement('span');
              newBadge.className = 'unread-badge';
              newBadge.textContent = count;
              card.querySelector('div:last-child').appendChild(newBadge);

              // Show red dot on image
              if (dot) dot.classList.remove('d-none');
            }
          });
        });
    }

    // Handle card click
    document.querySelectorAll('.user-card').forEach(card => {
      card.addEventListener('click', () => {
        selectedUserId = card.dataset.userid;
        document.getElementById('chatSection').style.display = 'block';
        loadMessages();
        updateUnreadCounts();

        // Highlight selected card
        document.querySelectorAll('.user-card').forEach(c => c.classList.remove('border', 'border-primary'));
        card.classList.add('border', 'border-primary');
      });
    });

    // Send message
    document.getElementById('sendForm').addEventListener('submit', e => {
      e.preventDefault();
      if (!selectedUserId) return;

      fetch('/chat/send', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          receiverID: selectedUserId,
          content: messageInput.value
        })
      }).then(() => {
        messageInput.value = '';
        loadMessages();
      });
    });

    // Polling every 3s
    setInterval(() => {
      loadMessages();
      updateUnreadCounts();
    }, 3000);

    updateUnreadCounts();
  </script>

</body>
</html>
