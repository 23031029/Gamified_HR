<% const progressWidth = Math.min(points.balance / 3000 * 100, 100); %>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <link rel="stylesheet" type="text/css" href="/overall.css">
  <title>User Dashboard</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.6/dist/css/bootstrap.min.css" rel="stylesheet" />
  <style>
    /* Your existing styles */
    .toast-container {
      bottom: 20px !important;
      right: 20px !important;
      top: auto !important;
      left: auto !important;
      width: auto;
      max-width: 350px;
    }
    #pointsToast {
      font-size: 1.25rem;
      padding: 1rem 1.5rem;
    }
    .container {
      max-width: 1200px;
      margin: auto;
      padding: 20px;
    }
    .card {
      background-color: #fff;
      border-radius: 12px;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
      padding: 25px;
      margin-bottom: 30px;
    }
    .points-row, .leaderboard-preview, .upcoming-programs, .reward-suggestions {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
    }
    .upcoming-green {
      background: #c8d83da3 !important; 
      color: #222;
      border: 1px solid #b8d42f;
    }
    .points-box {
      flex: 1;
      min-width: 200px;
      padding: 20px;
      border-radius: 12px;
      color: #fff;
      text-align: center;
    }
    .points-box h2 {
      margin: 0;
      font-size: 28px;
    }
    .points-box p {
      margin: 5px 0 0;
      font-size: 16px;
    }
    .earned { background: #C6D537; }
    .spent { background: #F87171; }
    .balance { background: #60A5FA; }
    .streak-box {
      background-color: #bfbfbf;
      padding: 20px;
      border-radius: 15px;
      margin-top: 30px;
      color: #000;
    }
    .streak-track {
      display: flex;
      justify-content: space-between;
      align-items: center;
      position: relative;
      margin-top: 10px;
    }
    .streak-track::before {
      content: '';
      position: absolute;
      top: 18px;
      left: 0;
      right: 0;
      height: 4px;
      background-color: #000;
      z-index: 0;
    }
    .streak-item {
      display: flex;
      flex-direction: column;
      align-items: center;
      z-index: 1;
    }
    .circle {
      width: 36px;
      height: 36px;
      border-radius: 50%;
      background-color: white;
      border: 3px solid #000;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
    }
    .circle.checked {
      background-color: #000;
      color: white;
    }
    .streak-text {
      margin-top: 5px;
      font-size: 12px;
      text-align: center;
    }
    .section-header {
      font-size: 18px;
      font-weight: bold;
      margin-bottom: 10px;
    }
    .list-item {
      flex: 1;
      min-width: 200px;
      background: #f9f9f9;
      border: 1px solid #ddd;
      padding: 15px;
      border-radius: 10px;
    }
    .list-item h4 {
      margin: 0 0 5px;
    }
    .list-item small {
      color: #666;
    }
    @keyframes growBar {
      to {
        width: var(--target);
      }
    }
    /* NEW: Styles for reward suggestions card and items */
    .reward-card {
      background-color: #fff;
      border-radius: 12px;
      box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
      padding: 25px;
      margin-top: 30px;
    }
    .reward-suggestions {
      gap: 20px;
      display: flex;
      flex-wrap: wrap;
    }
    .reward-item {
      background: #f9f9f9;
      border: 1px solid #ddd;
      padding: 15px;
      border-radius: 10px;
      color: #222;
      min-height: 120px;
      display: flex;
      flex-direction: column;
      justify-content: center;
      flex: 1;
      min-width: 200px;
    }
    .reward-item h4 {
      margin-bottom: 6px;
    }
    .reward-item small {
      color: #666;
    }
  </style>
</head>
<body>
  <%- include('../partials/navbar.ejs') %>

  <div class="container">

    <div class="card">
      <div class="points-row">
        <div class="points-box earned">
          <h2><%= points.earned %></h2>
          <p>Total Points Earned</p>
        </div>
        <div class="points-box spent">
          <h2><%= points.spent %></h2>
          <p>Total Points Spent</p>
        </div>
        <div class="points-box balance">
          <h2><%= points.balance %></h2>
          <p>Current Balance</p>
        </div>
      </div>
    </div>

    <% const currentPoints = points.balance; %>
    <% const streaks = [
      { threshold: 50, reward: 5 },
      { threshold: 1000, reward: 10 },
      { threshold: 1500, reward: 15 },
      { threshold: 2000, reward: 20 },
      { threshold: 2500, reward: 25 },
      { threshold: 3000, reward: 30 }
    ]; %>

    <div class="card streak-box">
      <div class="section-header">Milestone Tracker</div>
      <div class="streak-track">
        <% streaks.forEach(streak => { %>
          <div class="streak-item">
            <div class="circle <%= currentPoints >= streak.threshold ? 'checked' : '' %>">
              <%= currentPoints >= streak.threshold ? 'âœ“' : '' %>
            </div>
            <div class="streak-text">
              <strong>+<%= streak.reward %>pts</strong><br />
              <%= streak.threshold %>pts
            </div>
          </div>
        <% }); %>
      </div>
    </div>

    <div style="margin: 20px 0;">
      <div style="width: 100%; background: #e0e0e0; border-radius: 20px; overflow: hidden; height: 25px;">
        <div 
          style="
            height: 100%;
            background: linear-gradient(90deg, #C6D537, #A3AEB1);
            width: 0%;
            animation: growBar 1s ease forwards;
          "
          data-target="<%= progressWidth %>%"
        ></div>
      </div>
      <p style="font-size: 0.9em; margin-top: 5px; text-align:center;">
        Progress: <%= points.balance %> / 3000 pts
      </p>
    </div>

    <% if (pointsEarned) { %>
    <div class="toast-container position-fixed p-3" style="z-index: 1100;">
      <div id="pointsToast" class="toast align-items-center text-bg-success border-0" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
          <div class="toast-body">
            Good job on finishing the program, you have earned <%= pointsEarned %> points!
          </div>
          <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
      </div>
    </div>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const toastEl = document.getElementById('pointsToast');
        const toast = new bootstrap.Toast(toastEl, { delay: 5000 });
        toast.show();
      });
    </script>
    <% } %>

    <div class="card">
      <div class="section-header">Your Programs</div>
      <div style="display: flex; gap: 30px; flex-wrap: wrap;">
        <div style="flex:1; min-width: 250px;">
          <h3>Today's Program</h3>
          <div class="upcoming-programs">
            <% if (upcomingPrograms.length) { %>
              <%
                const now = new Date(currentTime); // Use the current time passed from the server
              %>
              <% upcomingPrograms.forEach(program => { %>
                <%
                  // Construct the program's scheduled start and end times
                  const programStartDate = new Date(program.Date);
                  const [startHours, startMinutes, startSeconds] = program.Start_Time.split(':').map(Number);
                  programStartDate.setHours(startHours, startMinutes, startSeconds, 0);

                  const programEndDate = new Date(programStartDate.getTime()); // Clone start date
                  programEndDate.setMinutes(programStartDate.getMinutes() + program.Duration);

                  // Calculate the scan window
                  const scanWindowStart = new Date(programEndDate.getTime() - (15 * 60 * 1000)); // 15 mins before end
                  const scanWindowEnd = new Date(programEndDate.getTime() + (15 * 60 * 1000));   // 15 mins after end

                  // Check if current time is within the scan window
                  const isWithinScanWindow = now.getTime() >= scanWindowStart.getTime() &&
                                             now.getTime() <= scanWindowEnd.getTime();
                  
                  // Check if program status allows scanning
                  const canScan = program.Status !== 'Completed' && program.Status !== 'Cancelled'; // Ensure it's not completed or cancelled

                  // Show button if conditions met
                  const showScanButton = isWithinScanWindow && canScan;
                %>
                <div class="list-item upcoming-green">
                  <h4><%= program.Title %></h4>
                  <small>
                    <%= program.Type %> | 
                    <span style="color: red; font-weight: bolder;">
                      <%= program.Date ? (program.Date.toLocaleDateString ? program.Date.toLocaleDateString() : program.Date) : '' %>
                      &nbsp;
                      <%= program.Start_Time ? program.Start_Time.substring(0,5) : '' %>
                      (<%= program.Duration %> mins)
                    </span>
                  </small><br/>
                  <small>Status: <strong><%= program.Status %></strong></small>
                  <% if (showScanButton) { %>
                    <div style="margin-top: 10px;">
                      <a href="/user/scan" class="btn btn-primary btn-sm">Scan Attendance</a>
                    </div>
                  <% } %>
                </div>
              <% }); %>
            <% } else { %>
              <div class="list-item">No upcoming program.</div>
            <% } %>
          </div>
        </div>

        <div style="flex:1; min-width: 250px;">
          <h3>Registered</h3>
          <div class="ongoing-programs">
            <% if (ongoingPrograms.length) { %>
              <% ongoingPrograms.forEach(program => { %>
                <div class="list-item">
                  <h4><%= program.Title %></h4>
                  <small>
                    <%= program.Type %> | 
                    <%= program.Date ? (program.Date.toLocaleDateString ? program.Date.toLocaleDateString() : program.Date) : '' %>
                    &nbsp;
                    <%= program.Start_Time ? program.Start_Time.substring(0,5) : '' %>
                    (<%= program.Duration %> mins)
                  </small>
                  
                  <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 5px;">
                    <small>Status: <strong><%= program.Status %></strong></small>
                    <form action="/cancel/<%= program.participantID %>" method="POST">
                      <button type="submit" class="btn btn-danger btn-sm" onclick="return confirm('Are you sure you want to cancel <%= program.Title %> (<%= program.Date ? (program.Date.toLocaleDateString ? program.Date.toLocaleDateString() : program.Date) : '' %>)')">Cancel</button>
                    </form>
                  </div>
                </div>
              <% }); %>
            <% } else { %>
              <div class="list-item">No registered programs.</div>
            <% } %>
          </div>
        </div>
      </div>
    </div>

    <%
      function uniqueRewards(arr) {
        const seen = new Set();
        return arr.filter(r => {
          // Create a unique identifier for each reward based on name and points
          const identifier = `${r.name}-${r.points}`; 
          if (seen.has(identifier)) return false;
          seen.add(identifier);
          return true;
        });
      }

      const nearby = rewards && rewards.length
        ? rewards.filter(r => r.points >= currentPoints && r.points <= currentPoints + 100)
        : [];
      
      const rewardsToShow = uniqueRewards(nearby); // Apply deduplication
    %>

    <% if (rewardsToShow.length) { %>
      <div class="reward-card">
        <div class="section-header">You're close to these rewards!</div>
        <div class="reward-suggestions">
          <% rewardsToShow.forEach(r => { %>
            <div class="reward-item">
              <h4><%= r.name %></h4>
              <small><%= r.points %> pts | <%= r.description %></small>
            </div>
          <% }); %>
        </div>
      </div>
    <% } %>

  </div>

  <script>
    const progressBar = document.querySelector('div[data-target]');
    const target = progressBar.getAttribute('data-target');
    progressBar.style.setProperty('--target', target);
  </script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

</body>
</html>