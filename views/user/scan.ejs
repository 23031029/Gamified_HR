<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Attendance Scanner</title>
    <link rel="stylesheet" href="/overall.css" />
    <style>
        .container {
            background: white;
            border-radius: 20px;
            padding: 30px 25px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            text-align: center;
            max-width: 320px;
            width: 100%;
        }
        h1 {
            color: #333;
            margin-bottom: 25px;
            font-size: 22px;
            font-weight: 600;
        }
        #reader {
            margin: 0 auto 20px;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 8px 16px rgba(0,0,0,0.1);
        }
        #result {
            padding: 15px;
            border-radius: 10px;
            font-size: 16px;
            font-weight: 500;
            min-height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: #f8f9fa;
            color: #666;
            transition: all 0.3s ease;
        }
        #result.success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        #result.error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        .scan-icon {
            font-size: 40px;
            margin-bottom: 15px;
            opacity: 0.7;
        }

        /* Toast Notification Styles */
        .toast {
            position: fixed;
            bottom: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 12px;
            box-shadow: 0 8px 24px rgba(0,0,0,0.15);
            font-weight: 600;
            z-index: 3000;
            display: none;
            align-items: center;
            max-width: 350px;
            animation: slideInUp 0.3s ease-out;
        }

        .toast.error {
            background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
            color: white;
        }

        .toast.success {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
        }

        .toast.warning {
            background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
            color: white;
        }

        .toast-close {
            background: none;
            border: none;
            color: inherit;
            font-size: 20px;
            cursor: pointer;
            margin-left: 12px;
            opacity: 0.8;
            transition: opacity 0.2s;
        }

        .toast-close:hover {
            opacity: 1;
        }

        @keyframes slideInUp {
            from {
                transform: translateY(100px);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        .error-icon {
            margin-right: 8px;
            font-size: 18px;
        }

        /* Instructions box */
        .instructions {
            background: #e3f2fd;
            border: 1px solid #bbdefb;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 20px;
            font-size: 14px;
            color: #1565c0;
        }

        .instructions strong {
            display: block;
            margin-bottom: 8px;
            color: #0d47a1;
        }

        .instructions ul {
            text-align: left;
            margin: 0;
            padding-left: 20px;
        }

        .instructions li {
            margin-bottom: 4px;
        }
    </style>
</head>
<body>
    <%- include('../partials/navbar.ejs') %>
    <div class="container">
        <div class="scan-icon">üì±</div>
        <h1>Scan QR Code to Mark Attendance</h1>
        
        <div class="instructions">
            <strong>‚ö†Ô∏è Important Notes:</strong>
            <ul>
                <li>You must register for the program first</li>
                <li>Scan only during program time + 15 min grace period</li>
                <li>Each QR code can only be scanned once</li>
                <li>Scanning available 30 minutes before program starts</li>
            </ul>
        </div>

        <div id="reader"></div>
        <div id="result">Point your camera at the QR code</div>
    </div>

    <!-- Toast Notifications -->
    <div id="errorToast" class="toast error">
        <span class="error-icon">‚ùå</span>
        <span id="errorMessage"></span>
        <button class="toast-close" onclick="hideToast('errorToast')">√ó</button>
    </div>

    <div id="successToast" class="toast success">
        <span class="error-icon">‚úÖ</span>
        <span id="successMessage"></span>
        <button class="toast-close" onclick="hideToast('successToast')">√ó</button>
    </div>

    <div id="warningToast" class="toast warning">
        <span class="error-icon">‚ö†Ô∏è</span>
        <span id="warningMessage"></span>
        <button class="toast-close" onclick="hideToast('warningToast')">√ó</button>
    </div>

    <script src="https://unpkg.com/html5-qrcode"></script>
    <script>
        // Toast functions
        function showToast(type, message) {
            const toast = document.getElementById(type + 'Toast');
            const messageElement = document.getElementById(type + 'Message');
            messageElement.textContent = message;
            toast.style.display = 'flex';
            
            // Auto-hide after 5 seconds
            setTimeout(() => {
                hideToast(type + 'Toast');
            }, 5000);
        }

        function hideToast(toastId) {
            document.getElementById(toastId).style.display = 'none';
        }

        // Handle URL parameters on page load
        (function() {
            const params = new URLSearchParams(window.location.search);
            
            // Handle error messages
            const error = params.get('error');
            if (error) {
                let errorMessage = '';
                switch (error) {
                    case 'not_registered':
                        errorMessage = 'You did not register for this program beforehand';
                        break;
                    case 'already_marked':
                        errorMessage = 'Attendance already marked for this program';
                        break;
                    case 'too_late':
                        errorMessage = 'QR code expired - program ended more than 15 minutes ago';
                        break;
                    case 'too_early':
                        errorMessage = 'QR code not yet active - too early to scan';
                        break;
                    case 'program_not_started':
                        errorMessage = 'Program has not started yet - please wait';
                        break;
                    case 'program_inactive':
                        errorMessage = 'This program is no longer active';
                        break;
                    case 'timeslot_not_found':
                        errorMessage = 'Invalid QR code - timeslot not found';
                        break;
                    case 'invalid_qr':
                        errorMessage = 'Invalid QR code format';
                        break;
                    case 'database_error':
                        errorMessage = 'System error - please try again later';
                        break;
                    case 'points_error':
                        errorMessage = 'Attendance marked but points update failed';
                        break;
                    default:
                        errorMessage = 'An unknown error occurred';
                }
                showToast('error', errorMessage);
            }

            // Handle success messages
            const attendance = params.get('attendance');
            if (attendance === 'success') {
                const pointsEarned = params.get('pointsEarned');
                const program = decodeURIComponent(params.get('program') || 'program');
                showToast('success', `Attendance marked! You earned ${pointsEarned} points for ${program}`);
            }

            // Clean up URL parameters
            if (window.history.replaceState && (error || attendance)) {
                const url = new URL(window.location);
                url.searchParams.delete('error');
                url.searchParams.delete('attendance');
                url.searchParams.delete('pointsEarned');
                url.searchParams.delete('program');
                window.history.replaceState({}, document.title, url.pathname);
            }
        })();

        // QR Scanner functionality
        function onScanSuccess(decodedText, decodedResult) {
            const resultDiv = document.getElementById('result');
            resultDiv.innerHTML = "üîÑ Processing attendance...";
            resultDiv.className = '';
            
            // Validate that it's a proper attendance URL
            if (!decodedText.includes('/user/attend?timeslotID=')) {
                resultDiv.innerHTML = "‚ùå Invalid QR Code";
                resultDiv.className = 'error';
                showToast('error', 'This is not a valid attendance QR code');
                return;
            }
            
            // Add a small delay before redirecting for better UX
            setTimeout(() => {
                window.location.href = decodedText;
            }, 1000);
        }

        function onScanFailure(error) {
            // Silent failure - no need to show scan errors constantly
            // Only log to console for debugging
            console.debug('QR scan attempt failed:', error);
        }

        // Initialize QR scanner
        const scanner = new Html5QrcodeScanner("reader", {
            fps: 10,
            qrbox: { width: 220, height: 220 },
            rememberLastUsedCamera: true,
            showTorchButtonIfSupported: true,
            supportedScanTypes: [Html5QrcodeScanType.SCAN_TYPE_CAMERA],
            aspectRatio: 1.0
        });

        scanner.render(onScanSuccess, onScanFailure);

        // Add some helpful text updates
        setTimeout(() => {
            const resultDiv = document.getElementById('result');
            if (resultDiv.textContent === 'Point your camera at the QR code') {
                resultDiv.innerHTML = "üì∑ Camera ready - scan QR code";
            }
        }, 2000);
    </script>
</body>
</html>